// Generated by gencpp from file kusv_msgs/LanePointDataArray.msg
// DO NOT EDIT!


#ifndef KUSV_MSGS_MESSAGE_LANEPOINTDATAARRAY_H
#define KUSV_MSGS_MESSAGE_LANEPOINTDATAARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <kusv_msgs/LanePointData.h>

namespace kusv_msgs
{
template <class ContainerAllocator>
struct LanePointDataArray_
{
  typedef LanePointDataArray_<ContainerAllocator> Type;

  LanePointDataArray_()
    : id()
    , frame_id()
    , lane()  {
    }
  LanePointDataArray_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , frame_id(_alloc)
    , lane(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _frame_id_type;
  _frame_id_type frame_id;

   typedef std::vector< ::kusv_msgs::LanePointData_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::kusv_msgs::LanePointData_<ContainerAllocator> >::other >  _lane_type;
  _lane_type lane;





  typedef boost::shared_ptr< ::kusv_msgs::LanePointDataArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kusv_msgs::LanePointDataArray_<ContainerAllocator> const> ConstPtr;

}; // struct LanePointDataArray_

typedef ::kusv_msgs::LanePointDataArray_<std::allocator<void> > LanePointDataArray;

typedef boost::shared_ptr< ::kusv_msgs::LanePointDataArray > LanePointDataArrayPtr;
typedef boost::shared_ptr< ::kusv_msgs::LanePointDataArray const> LanePointDataArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kusv_msgs::LanePointDataArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kusv_msgs::LanePointDataArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kusv_msgs::LanePointDataArray_<ContainerAllocator1> & lhs, const ::kusv_msgs::LanePointDataArray_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.frame_id == rhs.frame_id &&
    lhs.lane == rhs.lane;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kusv_msgs::LanePointDataArray_<ContainerAllocator1> & lhs, const ::kusv_msgs::LanePointDataArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kusv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kusv_msgs::LanePointDataArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kusv_msgs::LanePointDataArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kusv_msgs::LanePointDataArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kusv_msgs::LanePointDataArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kusv_msgs::LanePointDataArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kusv_msgs::LanePointDataArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kusv_msgs::LanePointDataArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e5c2b5baef492fd4c9aada1ec12cd07b";
  }

  static const char* value(const ::kusv_msgs::LanePointDataArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe5c2b5baef492fd4ULL;
  static const uint64_t static_value2 = 0xc9aada1ec12cd07bULL;
};

template<class ContainerAllocator>
struct DataType< ::kusv_msgs::LanePointDataArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kusv_msgs/LanePointDataArray";
  }

  static const char* value(const ::kusv_msgs::LanePointDataArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kusv_msgs::LanePointDataArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string id\n"
"string frame_id\n"
"LanePointData[] lane\n"
"\n"
"================================================================================\n"
"MSG: kusv_msgs/LanePointData\n"
"string id\n"
"string frame_id\n"
"geometry_msgs/Point[] point\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::kusv_msgs::LanePointDataArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kusv_msgs::LanePointDataArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.frame_id);
      stream.next(m.lane);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LanePointDataArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kusv_msgs::LanePointDataArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kusv_msgs::LanePointDataArray_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.id);
    s << indent << "frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.frame_id);
    s << indent << "lane[]" << std::endl;
    for (size_t i = 0; i < v.lane.size(); ++i)
    {
      s << indent << "  lane[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::kusv_msgs::LanePointData_<ContainerAllocator> >::stream(s, indent + "    ", v.lane[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // KUSV_MSGS_MESSAGE_LANEPOINTDATAARRAY_H
