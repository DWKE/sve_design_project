// Generated by gencpp from file kusv_msgs/PolyfitLaneDataArray.msg
// DO NOT EDIT!


#ifndef KUSV_MSGS_MESSAGE_POLYFITLANEDATAARRAY_H
#define KUSV_MSGS_MESSAGE_POLYFITLANEDATAARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <kusv_msgs/PolyfitLaneData.h>

namespace kusv_msgs
{
template <class ContainerAllocator>
struct PolyfitLaneDataArray_
{
  typedef PolyfitLaneDataArray_<ContainerAllocator> Type;

  PolyfitLaneDataArray_()
    : id()
    , frame_id()
    , polyfitLanes()  {
    }
  PolyfitLaneDataArray_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , frame_id(_alloc)
    , polyfitLanes(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _frame_id_type;
  _frame_id_type frame_id;

   typedef std::vector< ::kusv_msgs::PolyfitLaneData_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::kusv_msgs::PolyfitLaneData_<ContainerAllocator> >::other >  _polyfitLanes_type;
  _polyfitLanes_type polyfitLanes;





  typedef boost::shared_ptr< ::kusv_msgs::PolyfitLaneDataArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kusv_msgs::PolyfitLaneDataArray_<ContainerAllocator> const> ConstPtr;

}; // struct PolyfitLaneDataArray_

typedef ::kusv_msgs::PolyfitLaneDataArray_<std::allocator<void> > PolyfitLaneDataArray;

typedef boost::shared_ptr< ::kusv_msgs::PolyfitLaneDataArray > PolyfitLaneDataArrayPtr;
typedef boost::shared_ptr< ::kusv_msgs::PolyfitLaneDataArray const> PolyfitLaneDataArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kusv_msgs::PolyfitLaneDataArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kusv_msgs::PolyfitLaneDataArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kusv_msgs::PolyfitLaneDataArray_<ContainerAllocator1> & lhs, const ::kusv_msgs::PolyfitLaneDataArray_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.frame_id == rhs.frame_id &&
    lhs.polyfitLanes == rhs.polyfitLanes;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kusv_msgs::PolyfitLaneDataArray_<ContainerAllocator1> & lhs, const ::kusv_msgs::PolyfitLaneDataArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kusv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kusv_msgs::PolyfitLaneDataArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kusv_msgs::PolyfitLaneDataArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kusv_msgs::PolyfitLaneDataArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kusv_msgs::PolyfitLaneDataArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kusv_msgs::PolyfitLaneDataArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kusv_msgs::PolyfitLaneDataArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kusv_msgs::PolyfitLaneDataArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "734f84f42af2bae65f1795f454b54519";
  }

  static const char* value(const ::kusv_msgs::PolyfitLaneDataArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x734f84f42af2bae6ULL;
  static const uint64_t static_value2 = 0x5f1795f454b54519ULL;
};

template<class ContainerAllocator>
struct DataType< ::kusv_msgs::PolyfitLaneDataArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kusv_msgs/PolyfitLaneDataArray";
  }

  static const char* value(const ::kusv_msgs::PolyfitLaneDataArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kusv_msgs::PolyfitLaneDataArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string id\n"
"string frame_id\n"
"PolyfitLaneData[] polyfitLanes\n"
"\n"
"================================================================================\n"
"MSG: kusv_msgs/PolyfitLaneData\n"
"string id\n"
"string frame_id\n"
"float64 a\n"
"float64 b\n"
"float64 c\n"
"float64 d\n"
;
  }

  static const char* value(const ::kusv_msgs::PolyfitLaneDataArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kusv_msgs::PolyfitLaneDataArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.frame_id);
      stream.next(m.polyfitLanes);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PolyfitLaneDataArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kusv_msgs::PolyfitLaneDataArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kusv_msgs::PolyfitLaneDataArray_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.id);
    s << indent << "frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.frame_id);
    s << indent << "polyfitLanes[]" << std::endl;
    for (size_t i = 0; i < v.polyfitLanes.size(); ++i)
    {
      s << indent << "  polyfitLanes[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::kusv_msgs::PolyfitLaneData_<ContainerAllocator> >::stream(s, indent + "    ", v.polyfitLanes[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // KUSV_MSGS_MESSAGE_POLYFITLANEDATAARRAY_H
