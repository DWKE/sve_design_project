// Generated by gencpp from file kusv_msgs/kusv_CanInfo.msg
// DO NOT EDIT!


#ifndef KUSV_MSGS_MESSAGE_KUSV_CANINFO_H
#define KUSV_MSGS_MESSAGE_KUSV_CANINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace kusv_msgs
{
template <class ContainerAllocator>
struct kusv_CanInfo_
{
  typedef kusv_CanInfo_<ContainerAllocator> Type;

  kusv_CanInfo_()
    : header()
    , speedfr(0.0)
    , speedfl(0.0)
    , speedrr(0.0)
    , speedrl(0.0)
    , speed_avr_r(0.0)
    , lat_acc_speed(0.0)
    , parking_brake_on(0)
    , air_cond_on(0)
    , steering_wheel_angle(0.0)
    , steering_wheel_angular(0)
    , steering_wheel_tq(0.0)
    , pos_acc_pedal(0.0)
    , brake_active_state(0)
    , brake_cylinder_press(0.0)
    , engine_speed(0.0)
    , gear_trans_state(0)
    , gear_seldisp(0)
    , pos_throttle(0.0)
    , cluster_odometer(0.0)
    , lon_acc_speed(0.0)
    , vehicle_speed_engine(0)
    , yaw_rate(0.0)  {
    }
  kusv_CanInfo_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , speedfr(0.0)
    , speedfl(0.0)
    , speedrr(0.0)
    , speedrl(0.0)
    , speed_avr_r(0.0)
    , lat_acc_speed(0.0)
    , parking_brake_on(0)
    , air_cond_on(0)
    , steering_wheel_angle(0.0)
    , steering_wheel_angular(0)
    , steering_wheel_tq(0.0)
    , pos_acc_pedal(0.0)
    , brake_active_state(0)
    , brake_cylinder_press(0.0)
    , engine_speed(0.0)
    , gear_trans_state(0)
    , gear_seldisp(0)
    , pos_throttle(0.0)
    , cluster_odometer(0.0)
    , lon_acc_speed(0.0)
    , vehicle_speed_engine(0)
    , yaw_rate(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _speedfr_type;
  _speedfr_type speedfr;

   typedef double _speedfl_type;
  _speedfl_type speedfl;

   typedef double _speedrr_type;
  _speedrr_type speedrr;

   typedef double _speedrl_type;
  _speedrl_type speedrl;

   typedef double _speed_avr_r_type;
  _speed_avr_r_type speed_avr_r;

   typedef double _lat_acc_speed_type;
  _lat_acc_speed_type lat_acc_speed;

   typedef uint8_t _parking_brake_on_type;
  _parking_brake_on_type parking_brake_on;

   typedef uint8_t _air_cond_on_type;
  _air_cond_on_type air_cond_on;

   typedef double _steering_wheel_angle_type;
  _steering_wheel_angle_type steering_wheel_angle;

   typedef uint16_t _steering_wheel_angular_type;
  _steering_wheel_angular_type steering_wheel_angular;

   typedef double _steering_wheel_tq_type;
  _steering_wheel_tq_type steering_wheel_tq;

   typedef double _pos_acc_pedal_type;
  _pos_acc_pedal_type pos_acc_pedal;

   typedef uint8_t _brake_active_state_type;
  _brake_active_state_type brake_active_state;

   typedef double _brake_cylinder_press_type;
  _brake_cylinder_press_type brake_cylinder_press;

   typedef double _engine_speed_type;
  _engine_speed_type engine_speed;

   typedef uint8_t _gear_trans_state_type;
  _gear_trans_state_type gear_trans_state;

   typedef uint8_t _gear_seldisp_type;
  _gear_seldisp_type gear_seldisp;

   typedef double _pos_throttle_type;
  _pos_throttle_type pos_throttle;

   typedef double _cluster_odometer_type;
  _cluster_odometer_type cluster_odometer;

   typedef double _lon_acc_speed_type;
  _lon_acc_speed_type lon_acc_speed;

   typedef uint8_t _vehicle_speed_engine_type;
  _vehicle_speed_engine_type vehicle_speed_engine;

   typedef double _yaw_rate_type;
  _yaw_rate_type yaw_rate;





  typedef boost::shared_ptr< ::kusv_msgs::kusv_CanInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kusv_msgs::kusv_CanInfo_<ContainerAllocator> const> ConstPtr;

}; // struct kusv_CanInfo_

typedef ::kusv_msgs::kusv_CanInfo_<std::allocator<void> > kusv_CanInfo;

typedef boost::shared_ptr< ::kusv_msgs::kusv_CanInfo > kusv_CanInfoPtr;
typedef boost::shared_ptr< ::kusv_msgs::kusv_CanInfo const> kusv_CanInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kusv_msgs::kusv_CanInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kusv_msgs::kusv_CanInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kusv_msgs::kusv_CanInfo_<ContainerAllocator1> & lhs, const ::kusv_msgs::kusv_CanInfo_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.speedfr == rhs.speedfr &&
    lhs.speedfl == rhs.speedfl &&
    lhs.speedrr == rhs.speedrr &&
    lhs.speedrl == rhs.speedrl &&
    lhs.speed_avr_r == rhs.speed_avr_r &&
    lhs.lat_acc_speed == rhs.lat_acc_speed &&
    lhs.parking_brake_on == rhs.parking_brake_on &&
    lhs.air_cond_on == rhs.air_cond_on &&
    lhs.steering_wheel_angle == rhs.steering_wheel_angle &&
    lhs.steering_wheel_angular == rhs.steering_wheel_angular &&
    lhs.steering_wheel_tq == rhs.steering_wheel_tq &&
    lhs.pos_acc_pedal == rhs.pos_acc_pedal &&
    lhs.brake_active_state == rhs.brake_active_state &&
    lhs.brake_cylinder_press == rhs.brake_cylinder_press &&
    lhs.engine_speed == rhs.engine_speed &&
    lhs.gear_trans_state == rhs.gear_trans_state &&
    lhs.gear_seldisp == rhs.gear_seldisp &&
    lhs.pos_throttle == rhs.pos_throttle &&
    lhs.cluster_odometer == rhs.cluster_odometer &&
    lhs.lon_acc_speed == rhs.lon_acc_speed &&
    lhs.vehicle_speed_engine == rhs.vehicle_speed_engine &&
    lhs.yaw_rate == rhs.yaw_rate;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kusv_msgs::kusv_CanInfo_<ContainerAllocator1> & lhs, const ::kusv_msgs::kusv_CanInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kusv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kusv_msgs::kusv_CanInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kusv_msgs::kusv_CanInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kusv_msgs::kusv_CanInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kusv_msgs::kusv_CanInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kusv_msgs::kusv_CanInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kusv_msgs::kusv_CanInfo_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kusv_msgs::kusv_CanInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0d05be062e80361fb3d556c45a03d561";
  }

  static const char* value(const ::kusv_msgs::kusv_CanInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0d05be062e80361fULL;
  static const uint64_t static_value2 = 0xb3d556c45a03d561ULL;
};

template<class ContainerAllocator>
struct DataType< ::kusv_msgs::kusv_CanInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kusv_msgs/kusv_CanInfo";
  }

  static const char* value(const ::kusv_msgs::kusv_CanInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kusv_msgs::kusv_CanInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float64 speedfr\n"
"float64 speedfl\n"
"float64 speedrr\n"
"float64 speedrl\n"
"float64 speed_avr_r\n"
"float64 lat_acc_speed\n"
"uint8 parking_brake_on\n"
"uint8 air_cond_on\n"
"float64 steering_wheel_angle\n"
"uint16 steering_wheel_angular\n"
"float64 steering_wheel_tq\n"
"float64 pos_acc_pedal\n"
"uint8 brake_active_state\n"
"float64 brake_cylinder_press\n"
"float64 engine_speed\n"
"uint8 gear_trans_state\n"
"uint8 gear_seldisp\n"
"float64 pos_throttle\n"
"float64 cluster_odometer\n"
"float64 lon_acc_speed\n"
"uint8 vehicle_speed_engine\n"
"float64 yaw_rate \n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::kusv_msgs::kusv_CanInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kusv_msgs::kusv_CanInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.speedfr);
      stream.next(m.speedfl);
      stream.next(m.speedrr);
      stream.next(m.speedrl);
      stream.next(m.speed_avr_r);
      stream.next(m.lat_acc_speed);
      stream.next(m.parking_brake_on);
      stream.next(m.air_cond_on);
      stream.next(m.steering_wheel_angle);
      stream.next(m.steering_wheel_angular);
      stream.next(m.steering_wheel_tq);
      stream.next(m.pos_acc_pedal);
      stream.next(m.brake_active_state);
      stream.next(m.brake_cylinder_press);
      stream.next(m.engine_speed);
      stream.next(m.gear_trans_state);
      stream.next(m.gear_seldisp);
      stream.next(m.pos_throttle);
      stream.next(m.cluster_odometer);
      stream.next(m.lon_acc_speed);
      stream.next(m.vehicle_speed_engine);
      stream.next(m.yaw_rate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct kusv_CanInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kusv_msgs::kusv_CanInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kusv_msgs::kusv_CanInfo_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "speedfr: ";
    Printer<double>::stream(s, indent + "  ", v.speedfr);
    s << indent << "speedfl: ";
    Printer<double>::stream(s, indent + "  ", v.speedfl);
    s << indent << "speedrr: ";
    Printer<double>::stream(s, indent + "  ", v.speedrr);
    s << indent << "speedrl: ";
    Printer<double>::stream(s, indent + "  ", v.speedrl);
    s << indent << "speed_avr_r: ";
    Printer<double>::stream(s, indent + "  ", v.speed_avr_r);
    s << indent << "lat_acc_speed: ";
    Printer<double>::stream(s, indent + "  ", v.lat_acc_speed);
    s << indent << "parking_brake_on: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.parking_brake_on);
    s << indent << "air_cond_on: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.air_cond_on);
    s << indent << "steering_wheel_angle: ";
    Printer<double>::stream(s, indent + "  ", v.steering_wheel_angle);
    s << indent << "steering_wheel_angular: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.steering_wheel_angular);
    s << indent << "steering_wheel_tq: ";
    Printer<double>::stream(s, indent + "  ", v.steering_wheel_tq);
    s << indent << "pos_acc_pedal: ";
    Printer<double>::stream(s, indent + "  ", v.pos_acc_pedal);
    s << indent << "brake_active_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.brake_active_state);
    s << indent << "brake_cylinder_press: ";
    Printer<double>::stream(s, indent + "  ", v.brake_cylinder_press);
    s << indent << "engine_speed: ";
    Printer<double>::stream(s, indent + "  ", v.engine_speed);
    s << indent << "gear_trans_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gear_trans_state);
    s << indent << "gear_seldisp: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gear_seldisp);
    s << indent << "pos_throttle: ";
    Printer<double>::stream(s, indent + "  ", v.pos_throttle);
    s << indent << "cluster_odometer: ";
    Printer<double>::stream(s, indent + "  ", v.cluster_odometer);
    s << indent << "lon_acc_speed: ";
    Printer<double>::stream(s, indent + "  ", v.lon_acc_speed);
    s << indent << "vehicle_speed_engine: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vehicle_speed_engine);
    s << indent << "yaw_rate: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_rate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KUSV_MSGS_MESSAGE_KUSV_CANINFO_H
