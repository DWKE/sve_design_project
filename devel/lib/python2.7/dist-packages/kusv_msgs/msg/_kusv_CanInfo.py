# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kusv_msgs/kusv_CanInfo.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class kusv_CanInfo(genpy.Message):
  _md5sum = "0d05be062e80361fb3d556c45a03d561"
  _type = "kusv_msgs/kusv_CanInfo"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
float64 speedfr
float64 speedfl
float64 speedrr
float64 speedrl
float64 speed_avr_r
float64 lat_acc_speed
uint8 parking_brake_on
uint8 air_cond_on
float64 steering_wheel_angle
uint16 steering_wheel_angular
float64 steering_wheel_tq
float64 pos_acc_pedal
uint8 brake_active_state
float64 brake_cylinder_press
float64 engine_speed
uint8 gear_trans_state
uint8 gear_seldisp
float64 pos_throttle
float64 cluster_odometer
float64 lon_acc_speed
uint8 vehicle_speed_engine
float64 yaw_rate 

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','speedfr','speedfl','speedrr','speedrl','speed_avr_r','lat_acc_speed','parking_brake_on','air_cond_on','steering_wheel_angle','steering_wheel_angular','steering_wheel_tq','pos_acc_pedal','brake_active_state','brake_cylinder_press','engine_speed','gear_trans_state','gear_seldisp','pos_throttle','cluster_odometer','lon_acc_speed','vehicle_speed_engine','yaw_rate']
  _slot_types = ['std_msgs/Header','float64','float64','float64','float64','float64','float64','uint8','uint8','float64','uint16','float64','float64','uint8','float64','float64','uint8','uint8','float64','float64','float64','uint8','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,speedfr,speedfl,speedrr,speedrl,speed_avr_r,lat_acc_speed,parking_brake_on,air_cond_on,steering_wheel_angle,steering_wheel_angular,steering_wheel_tq,pos_acc_pedal,brake_active_state,brake_cylinder_press,engine_speed,gear_trans_state,gear_seldisp,pos_throttle,cluster_odometer,lon_acc_speed,vehicle_speed_engine,yaw_rate

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(kusv_CanInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.speedfr is None:
        self.speedfr = 0.
      if self.speedfl is None:
        self.speedfl = 0.
      if self.speedrr is None:
        self.speedrr = 0.
      if self.speedrl is None:
        self.speedrl = 0.
      if self.speed_avr_r is None:
        self.speed_avr_r = 0.
      if self.lat_acc_speed is None:
        self.lat_acc_speed = 0.
      if self.parking_brake_on is None:
        self.parking_brake_on = 0
      if self.air_cond_on is None:
        self.air_cond_on = 0
      if self.steering_wheel_angle is None:
        self.steering_wheel_angle = 0.
      if self.steering_wheel_angular is None:
        self.steering_wheel_angular = 0
      if self.steering_wheel_tq is None:
        self.steering_wheel_tq = 0.
      if self.pos_acc_pedal is None:
        self.pos_acc_pedal = 0.
      if self.brake_active_state is None:
        self.brake_active_state = 0
      if self.brake_cylinder_press is None:
        self.brake_cylinder_press = 0.
      if self.engine_speed is None:
        self.engine_speed = 0.
      if self.gear_trans_state is None:
        self.gear_trans_state = 0
      if self.gear_seldisp is None:
        self.gear_seldisp = 0
      if self.pos_throttle is None:
        self.pos_throttle = 0.
      if self.cluster_odometer is None:
        self.cluster_odometer = 0.
      if self.lon_acc_speed is None:
        self.lon_acc_speed = 0.
      if self.vehicle_speed_engine is None:
        self.vehicle_speed_engine = 0
      if self.yaw_rate is None:
        self.yaw_rate = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.speedfr = 0.
      self.speedfl = 0.
      self.speedrr = 0.
      self.speedrl = 0.
      self.speed_avr_r = 0.
      self.lat_acc_speed = 0.
      self.parking_brake_on = 0
      self.air_cond_on = 0
      self.steering_wheel_angle = 0.
      self.steering_wheel_angular = 0
      self.steering_wheel_tq = 0.
      self.pos_acc_pedal = 0.
      self.brake_active_state = 0
      self.brake_cylinder_press = 0.
      self.engine_speed = 0.
      self.gear_trans_state = 0
      self.gear_seldisp = 0
      self.pos_throttle = 0.
      self.cluster_odometer = 0.
      self.lon_acc_speed = 0.
      self.vehicle_speed_engine = 0
      self.yaw_rate = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_6d2BdH2dB2d2B3dBd().pack(_x.speedfr, _x.speedfl, _x.speedrr, _x.speedrl, _x.speed_avr_r, _x.lat_acc_speed, _x.parking_brake_on, _x.air_cond_on, _x.steering_wheel_angle, _x.steering_wheel_angular, _x.steering_wheel_tq, _x.pos_acc_pedal, _x.brake_active_state, _x.brake_cylinder_press, _x.engine_speed, _x.gear_trans_state, _x.gear_seldisp, _x.pos_throttle, _x.cluster_odometer, _x.lon_acc_speed, _x.vehicle_speed_engine, _x.yaw_rate))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 128
      (_x.speedfr, _x.speedfl, _x.speedrr, _x.speedrl, _x.speed_avr_r, _x.lat_acc_speed, _x.parking_brake_on, _x.air_cond_on, _x.steering_wheel_angle, _x.steering_wheel_angular, _x.steering_wheel_tq, _x.pos_acc_pedal, _x.brake_active_state, _x.brake_cylinder_press, _x.engine_speed, _x.gear_trans_state, _x.gear_seldisp, _x.pos_throttle, _x.cluster_odometer, _x.lon_acc_speed, _x.vehicle_speed_engine, _x.yaw_rate,) = _get_struct_6d2BdH2dB2d2B3dBd().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_6d2BdH2dB2d2B3dBd().pack(_x.speedfr, _x.speedfl, _x.speedrr, _x.speedrl, _x.speed_avr_r, _x.lat_acc_speed, _x.parking_brake_on, _x.air_cond_on, _x.steering_wheel_angle, _x.steering_wheel_angular, _x.steering_wheel_tq, _x.pos_acc_pedal, _x.brake_active_state, _x.brake_cylinder_press, _x.engine_speed, _x.gear_trans_state, _x.gear_seldisp, _x.pos_throttle, _x.cluster_odometer, _x.lon_acc_speed, _x.vehicle_speed_engine, _x.yaw_rate))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 128
      (_x.speedfr, _x.speedfl, _x.speedrr, _x.speedrl, _x.speed_avr_r, _x.lat_acc_speed, _x.parking_brake_on, _x.air_cond_on, _x.steering_wheel_angle, _x.steering_wheel_angular, _x.steering_wheel_tq, _x.pos_acc_pedal, _x.brake_active_state, _x.brake_cylinder_press, _x.engine_speed, _x.gear_trans_state, _x.gear_seldisp, _x.pos_throttle, _x.cluster_odometer, _x.lon_acc_speed, _x.vehicle_speed_engine, _x.yaw_rate,) = _get_struct_6d2BdH2dB2d2B3dBd().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_6d2BdH2dB2d2B3dBd = None
def _get_struct_6d2BdH2dB2d2B3dBd():
    global _struct_6d2BdH2dB2d2B3dBd
    if _struct_6d2BdH2dB2d2B3dBd is None:
        _struct_6d2BdH2dB2d2B3dBd = struct.Struct("<6d2BdH2dB2d2B3dBd")
    return _struct_6d2BdH2dB2d2B3dBd
